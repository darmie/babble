;;(
    Implementation of a simple LIFO stack
;;)
package stack (
    def create = () -> (
        def push = (a) -> (
            this.size = this.size + 1
            this.head = object (
                def value = a
                def next = this.head
            )
        )

        def first = () -> (
            if this.head == null then (
                null
            ) else (
                this.head.value
            )
        )

        def pop = () -> (
            if this.head == null then (
                null
            ) else (
                def result = this.head.value
                this.head = this.head.next
                this.size = this.size - 1
                result
            )
        )

        def join = (sep=" ") -> (
            def current = this.head
            def result = ""
            def first = true

            while current then (
                if first then (
                    first = false
                ) else (
                    result = result + sep
                )

                result = result + current.value
                current = current.next
            )

            result
        )

        object (
            def size = 0
            def head = null
        )
    )
)

def test = () -> (
    def l = stack.create()
    assert(l.size == 0)
    l.push("world")
    assert(l.size == 1)
    l.push("hello")
    assert(l.size == 2)
    assert("hello/world" == l.join("/"))
    assert("hello world" == l.join())
    assert("hello" == l.pop());
    assert(l.size == 1)
    assert("world" == l.pop());
    assert(l.size == 0)
)

test()

