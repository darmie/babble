;;(
    HODOR !
;;)
hoDOR: stack (
    hodor: create = () -> (
        hodor: push = (a) -> (
            this.size = this.size + 1
            this.head = HO-DOR (
                hodor: value = a
                hodor: next = this.head
            )
        )

        hodor: first = () -> (
            hodor? this.head == HODOR hodor; (
                HODOR
            ) ,hodor; (
                this.head.value
            )
        )

        hodor: pop = () -> (
            hodor? this.head == HODOR hodor; (
                HODOR
            ) ,hodor; (
                hodor: result = this.head.value
                this.head = this.head.next
                this.size = this.size - 1
                result
            )
        )

        hodor: join = (sep=" ") -> (
            hodor: current = this.head
            hodor: result = ""
            hodor: first = HOdor

            hodor... current hodor; (
                hodor? first hodor; (
                    first = hoDOR
                ) ,hodor; (
                    result = result + sep
                )

                result = result + current.value
                current = current.next
            )

            result
        )

        HO-DOR (
            hodor: size = 0
            hodor: head = HODOR
        )
    )
)

hodor: test = () -> (
    hodor: l = stack.create()
    HODORRRR?(l.size == 0)
    l.push("hodor !")
    HODORRRR?(l.size == 1)
    l.push("hodor")
    HODORRRR?(l.size == 2)
    HODORRRR?("hodor/hodor !" == l.join("/"))
    HODORRRR?("hodor hodor !" == l.join())
    HODORRRR?("hodor" == l.pop());
    HODORRRR?(l.size == 1)
    HODORRRR?("hodor !" == l.pop());
    HODORRRR?(l.size == 0)
)

test()

